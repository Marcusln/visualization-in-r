library(shiny)
library(ggplot2)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Threshold Analysis"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("threshold",
"Threshold:",
min = 0.00,
max = 0.50,
value = 0.25),
selectInput("models",
"Model",
choices = c("log", "lda", "qda"))
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("logfit"),
plotOutput("threshold")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
load(file = "logfit.Rdata")
output$logfit<- renderPlot({
plot.list[[input$models]] + geom_vline(xintercept=input$threshold, linetype = "dashed",
color = "black")
})
output$threshold <- renderPlot({
confusion.matrix(table(ifelse(as.numeric(threshold.list[[input$models]] > input$threshold), 1, 0), test.data$y),
tit = paste0(input$models, " classification probability threshold ", input$threshold * 100, "%"))
})
}
library(rsconnect)
rsconnect::setAccountInfo(name='benaan123',
token='AB07B1C30A6D8AECD6B5F2DD75E2B2A2',
secret='Q51u8AVWYm/Nt0iZyFtkZSNDB+eMb5/Gn+gKvq3O')
rsconnect::deployApp('/Users/BenjaminAanes/Desktop/Threshold')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
rm(list = ls())
load(file = "logfit.Rdata")
library(shiny)
library(ggplot2)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Threshold Analysis"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("threshold",
"Threshold:",
min = 0.00,
max = 0.50,
value = 0.25),
selectInput("models",
"Model",
choices = c("log", "lda", "qda"))
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("logfit"),
plotOutput("threshold")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$logfit<- renderPlot({
plot.list[[input$models]] + geom_vline(xintercept=input$threshold, linetype = "dashed",
color = "black")
})
output$threshold <- renderPlot({
confusion.matrix(table(ifelse(as.numeric(threshold.list[[input$models]] > input$threshold), 1, 0), test.data$y),
tit = paste0(input$models, " classification probability threshold ", input$threshold * 100, "%"))
})
}
library(rsconnect)
rsconnect::setAccountInfo(name='benaan123',
token='AB07B1C30A6D8AECD6B5F2DD75E2B2A2',
secret='Q51u8AVWYm/Nt0iZyFtkZSNDB+eMb5/Gn+gKvq3O')
rsconnect::deployApp('/Users/BenjaminAanes/Desktop/Threshold')
rsconnect::deployApp('/Users/BenjaminAanes/Desktop/Threshold/')
load("/Volumes/Untitled/Users/Marcus/Dropbox/Skole (Selective Sync Conflict)/NHH/Master/V18/BUS464/BUS464 Vizualization in R/Shiny/Threshold/logfit.Rdata")
